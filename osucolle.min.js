const Parser=require("binary-parser-encoder").Parser,osuColle=module.exports,OSU_VERSION=20191211,headParser=(new Parser).endianess("little").uint32le("version").uint32le("size"),nameSizeParser=(new Parser).endianess("little").skip(1).string("size",{encoding:"utf8",length:1}),beatmapParser=(new Parser).string("md5_hash",{length:32}),stringPrefixParser=(new Parser).string("stringPrefix",{encoding:"utf8",length:2}),stringPrefix={stringPrefix:"\v "};function Database(e=OSU_VERSION){if(e=Number(e),isNaN(e))throw TypeError("provide version as a number");return this.version=e,this.size=0,this.collections={},this}function Collection(e){if(!e||""==e||e.length>25)throw TypeError("provide a name between 1 and 25 characters");return this.name=e,this.size=0,this.hashes=[],this}Database.prototype.appendCollection=function(e){return this.collections[e]=new Collection(e),this.size+=1,this},Database.prototype.removeCollection=function(e){if(!this.collections[e])throw TypeError("collection name not found in this database");return delete this.collections[e],this.size-=1,this},Database.prototype.toBuffer=function(){if(0===this.size)return TypeError("no collections in this database");let e=this,t=[],s={version:e.version,size:e.size};return t.push(headParser.encode(s)),Object.keys(e.collections).forEach(s=>{if(0===e.collections[s].size)return TypeError("empty collection in database");let i=String.fromCharCode(e.collections[s].name.length),r=(new Parser).string("nameSize",{encoding:"utf8",length:2}).string("name",{encoding:"utf8",length:e.collections[s].name.length}).uint32le("size"),n={nameSize:`\v${i}`,name:e.collections[s].name,size:e.collections[s].size};t.push(r.encode(n)),e.collections[s].hashes.forEach(e=>{t.push(stringPrefixParser.encode(stringPrefix));let s={md5_hash:e};t.push(beatmapParser.encode(s))})}),Buffer.concat(t)},Collection.prototype.appendBeatmap=function(e){if(!e||""==e||!e.match(/^[a-f0-9]{32}$/))throw TypeError("provide a valid beatmap md5 hash");return this.hashes.push(e),this.size+=1,this},Collection.prototype.removeBeatmap=function(e){if(!this.hashes.includes(e))throw TypeError("beatmap hash not found in this collection");return this.hashes.splice(this.hashes.indexOf(e),1),this.size-=1,this},Buffer.prototype.readCollection=function(){let e=new Database,t=headParser.parse(this);e.version=t.version;let s=this.slice(8);for(;s.length>0;){let t=nameSizeParser.parse(s).size.charCodeAt(0),r=(new Parser).skip(2).string("name",{encoding:"utf8",length:t}).uint32le("size").parse(s);if(r.name.length>25||0==r.size)throw TypeError("database is malformed");for(e.appendCollection(r.name),s=s.slice(8+t),i=0;i<r.size;i++){let t=beatmapParser.parse(s);if(!t.md5_hash.match(/^[a-f0-9]{32}$/))throw TypeError("database is malformed");e.collections[r.name].appendBeatmap(t.md5_hash),s=s.slice(34)}}return e},osuColle.Database=Database;